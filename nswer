i = len(arr)-1
    while i >= 0:
        if m - arr[i] in arr and arr.index(m - arr[i]) != i:
            return [arr.index(m - arr[i]) + 1, i + 1]
        i -= 1
        

 
return max([i^j for i in range(l,r+1) for j in range(i,r+1)])


partition list





void addend(){
	struct node*temp;
	struct node*temp1;
	int n;
	temp=(struct node*)malloc(sizeof(struct node));
	printf("enter the no");
	scanf("%d",&n);
	temp->data=n;
	temp->link=NULL;
	if(p==NULL)
	{
		p=temp;	
	}
	else{
		temp1=p;
		while(temp1!=NULL){
			temp1=temp1->link;
			
		}
		temp1->link=temp;
	}
}








#include<stdio.h>
#include<stdlib.h>
//structure is created in the begning  
struct node{
	int data;
	struct node * link;
};
struct node*p;

void add_begin(){
	struct node*temp;
	int n;
	printf("enter the no");
	scanf("%d",&n);
	if(p==NULL)
	{
		p=(struct node*)malloc(sizeof(struct node));
		p->data=n;
		p->link=NULL;
	}
	else
	{
		temp=(struct node*)malloc(sizeof(struct node));
		temp->data=n;
		temp->link=p;
		p=temp;
		
		
	}	
}
void print()
{
    struct node*temp;
    temp=p;
    if(p!=NULL)
    {
    while(temp->link!=NULL)
    {
        printf("%d",temp->data);
        temp=temp->link;

    }
    printf("%d",temp->data);
    }
}

void addend(){
	struct node*temp;
	struct node*temp1;
	int n;
	
	
	
	if(p==NULL)
	{
		printf("enter the no");
		scanf("%d",&n);
		
		temp=(struct node*)malloc(sizeof(struct node));	
		temp->data=n;
		temp->link=NULL;
		p=temp;
	}
	else{
		temp1=p;
		while(temp1!=NULL){
			temp1=temp1->link;
			
		}
		printf("enter the no");
		scanf("%d",&n);
		temp=(struct node*)malloc(sizeof(struct node));	
		temp->data=n;
		temp->link=NULL;
		temp1->link=temp;
	}
}
	
int main()
{
	add_begin();
	addend();
	addend();
	addend();
	
	print();
	add_begin();
	print();
}





#include<stdio.h>
#include<stdlib.h>
struct node{
	int data;
	struct node * link;
};
struct node*p;

void addend(){
	struct node*temp;
	struct node*point;
	int n;
	if(p==NULL)
	{
		printf("enter the no");
		scanf("%d",&n);
		
		temp=(struct node*)malloc(sizeof(struct node));	
		temp->data=n;
		temp->link=NULL;
		p = temp;
	}
	else{
		point=p;
		while(point -> link !=NULL){
			point=point->link;
			
		}
		printf("enter the no");
		scanf("%d",&n);
		temp=(struct node*)malloc(sizeof(struct node));	
		temp->data=n;
		temp->link=NULL;
		point->link=temp;
	}
}
void print()
{
    struct node*temp;
    temp=p;
    while(temp->link!=NULL)
    {
        printf("%d\t",temp->data);
        temp=temp->link;

    }
    printf("%d\t",temp->data);
    
}


	
int main()
{

	addend();
  print();
	addend();
  print();
	addend();
	


	print();
}







void add_before_d(){
	int da;
	printf("enter the data befoe which you wish to insert\n");
	scanf("%d",da);
	struct node*prev;
	struct node*temp;
	prev=p;
	while(prev->data!=da){
		prev=prev->link;
	}
	temp=(struct node*)malloc(sizeof(struct node));
	int t;
	printf("enter the no you want to insert\t");
	scanf("%d",&t);
	temp->data=t;
	temp->link=prev->link;
	prev->link=temp;
		
}












